<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://arasia.github.io/SimpleBlog/</id><title>Arasia's Blog</title><subtitle>Arasia's Simple Blog</subtitle> <updated>2021-03-30T22:31:47+09:00</updated> <author> <name>ChoungSun Kim</name> <uri>https://arasia.github.io/SimpleBlog/</uri> </author><link rel="self" type="application/atom+xml" href="https://arasia.github.io/SimpleBlog/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://arasia.github.io/SimpleBlog/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 ChoungSun Kim </rights> <icon>/SimpleBlog/assets/img/favicons/favicon.ico</icon> <logo>/SimpleBlog/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Java Optional</title><link href="https://arasia.github.io/SimpleBlog/posts/Java-Optional/" rel="alternate" type="text/html" title="Java Optional" /><published>2021-03-29T01:11:12+09:00</published> <updated>2021-03-30T22:27:25+09:00</updated> <id>https://arasia.github.io/SimpleBlog/posts/Java-Optional/</id> <content src="https://arasia.github.io/SimpleBlog/posts/Java-Optional/" /> <author> <name>ChoungSun Kim</name> </author> <category term="Language" /> <category term="Java" /> <summary> Optional Java 8 버전부터 추가된 Class 임의의 값이 존재하지 않을수도 있을 때 (Null Check가 필요할 때) 해당 값을 좀 더 안전하게 사용 가능하도록 만들어짐 Optional 생성 empty 비어있는 Optional을 생성한다 Function Name Parameter Return Type 비고 empty void Optional&amp;lt;T&amp;gt; Static Method ... </summary> </entry> <entry><title>Java Collectors</title><link href="https://arasia.github.io/SimpleBlog/posts/Java-Collectors/" rel="alternate" type="text/html" title="Java Collectors" /><published>2021-03-28T23:16:34+09:00</published> <updated>2021-03-30T22:27:25+09:00</updated> <id>https://arasia.github.io/SimpleBlog/posts/Java-Collectors/</id> <content src="https://arasia.github.io/SimpleBlog/posts/Java-Collectors/" /> <author> <name>ChoungSun Kim</name> </author> <category term="Language" /> <category term="Java" /> <summary> Collectors Stream의 종료 연산 중 collect를 할 때 사용된다 다양한 방법으로 사용자가 원하는 결과물을 만들어 낼 수 있다 Collection 결과물 반환 이미 지정된 형태의 결과물로 반환한다 toCollection Stream의 Element를 collectionFactory의 Return Type으로 모아 반환한다 Function Name Parameter Return Type 비고 toCollection Suppl... </summary> </entry> <entry><title>Java Stream API</title><link href="https://arasia.github.io/SimpleBlog/posts/Java-Stream-API/" rel="alternate" type="text/html" title="Java Stream API" /><published>2021-03-25T02:16:34+09:00</published> <updated>2021-03-30T22:27:25+09:00</updated> <id>https://arasia.github.io/SimpleBlog/posts/Java-Stream-API/</id> <content src="https://arasia.github.io/SimpleBlog/posts/Java-Stream-API/" /> <author> <name>ChoungSun Kim</name> </author> <category term="Language" /> <category term="Java" /> <summary> Stream API 외부 반복을 통해 작업하는 컬렉션과 다르게 내부 반복을 통해 작업을 수행 Stream은 재사용이 불가능함 Stream은 원본 데이터를 변경하지 않음 Filter-Map 기반의 API를 사용하여 Lazy 연산을 통해 성능을 최적화 parallelStream()을 통하여 간단한 병렬처리를 지원 Stream의 기본동작 Stream 생성 / 변경 Stream 중간 처리 Stream 최종 처리 Stream Class java.util.stream public interface Stream&amp;lt;T&amp;gt; extends BaseStream&amp;lt;T, Stream&amp;lt;T&amp;gt;&amp;gt; { Stream&amp;lt;T&amp;gt; filter(Predicate&amp;lt... </summary> </entry> <entry><title>Java Functional Interface</title><link href="https://arasia.github.io/SimpleBlog/posts/Java-Functional-Interface/" rel="alternate" type="text/html" title="Java Functional Interface" /><published>2021-03-23T01:21:23+09:00</published> <updated>2021-03-26T00:13:29+09:00</updated> <id>https://arasia.github.io/SimpleBlog/posts/Java-Functional-Interface/</id> <content src="https://arasia.github.io/SimpleBlog/posts/Java-Functional-Interface/" /> <author> <name>ChoungSun Kim</name> </author> <category term="Language" /> <category term="Java" /> <summary> Functional Interface Oracle Java Doc(Java 8) - Functional Interfaces﻿ Object Class의 Method를 제외하고 단 하나의 Abstract method만을 가진 Interface 따라서 Functional Interface는 단 하나의 기능을 나타낸다 Fucntional Interface Annotation @FunctionalInterface를 사용하여 Compiler가 해당 Interface는 Functional Interface임을 명시하기 위해 사용 @FunctionalInterface interface ExampleOfFunctionalInterface { public int doSomething(int ... </summary> </entry> <entry><title>자바 버전별 변경사항</title><link href="https://arasia.github.io/SimpleBlog/posts/Changes-by-Java-Version/" rel="alternate" type="text/html" title="자바 버전별 변경사항" /><published>2021-03-19T01:23:52+09:00</published> <updated>2021-03-25T02:05:08+09:00</updated> <id>https://arasia.github.io/SimpleBlog/posts/Changes-by-Java-Version/</id> <content src="https://arasia.github.io/SimpleBlog/posts/Changes-by-Java-Version/" /> <author> <name>ChoungSun Kim</name> </author> <category term="Language" /> <category term="Java" /> <summary> 자바 버전중 LTS인 버전에 대한 변경사항들을 정리 Overview Java Release History version Release Date End of Free Public Updates Extended Support Until JDK Beta 1995     JDK 1.0 January 1996     JDK 1.1 February 1997     J2SE 1.2 December 1998 ... </summary> </entry> </feed>
